<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_chec3_chexone.CheckmarxOneScanSummaryIntegration</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Integration script for the CheckmarxOne Scan Summary Integration.</description>
        <name>CheckmarxOneScanSummaryIntegration</name>
        <script><![CDATA[var CheckmarxOneScanSummaryIntegration = Class.create();
CheckmarxOneScanSummaryIntegration.prototype = Object.extendsObject(sn_vul.ApplicationVulnerabilityIntegrationBase, {

    UTIL: new x_chec3_chexone.CheckmarxOneUtil(),
    MSG: 'CheckmarxOneScanSummaryIntegration:',

    retrieveData: function() {
        gs.info(this.MSG + 'retrieveData');
        var params = this._getParameters(this.PROCESS.getValue('parameters'));
        var response = "<null/>";
        if (params.run) {
            //  appId,  offset
            response = this.getSummaryReport(Object.keys(params.run)[0], params.run[Object.keys(params.run)[0]]);
            this.validateXML(response, 'error');
        }
        params = this._serializeParameters(this._nextParameters(params));
        this.setNextRunParameters(params);

        //Saving delta_start_time
        if (!params.run) {
            var latest = this.LATEST ? this.LATEST : '';
            this.INTEGRATION.setValue('delta_start_time', latest);
            this.INTEGRATION.update();
            this.hasMoreData(false);
        } else
            this.hasMoreData(true);

        return {
            contents: new GlideSysAttachment().write(this.PROCESS, this.FILENAME, "xml", response),
            contentType: "sys_attachment",
            extension: "xml"
        };

    },

    //Creates XML summary for given scan Id
    getSummaryReport: function(appId, offsetId) {
        try {
            var scanSummaryRootNodeStart = "<scanData>";
            var scanSummaryRootNodeEnd = "</scanData>";
            var scaScanSummaryAll = '';
            var sastScanSummaryAll = '';
            var includescanSummaryAll = '';
            var newoffset = offsetId - 50;
            var includesca = this.UTIL.importScaFlaw(this.IMPLEMENTATION);
            var includesast = this.UTIL.importSastFlaw(this.IMPLEMENTATION);
            var responseLastScanSummary = this.UTIL.getScanInfo(this.IMPLEMENTATION, appId, newoffset, this._getCurrentDeltaStartTime());
            var jsonLastScanSummResp = JSON.parse(responseLastScanSummary.getBody());
            for (var item in jsonLastScanSummResp.scans) {
                //sca scan summary
                if (jsonLastScanSummResp.scans[item].engines.toString().includes("sca")) {
                    var scaresponsevul = this.UTIL.getScanSummaryInfo(this.IMPLEMENTATION, jsonLastScanSummResp.scans[item].id);
                    scaScanSummaryAll += '<scan id="' + 'sca' + jsonLastScanSummResp.scans[item].id + '" app_id="' + appId +
                        '" last_scan_date="' + this.UTIL.parseDate(jsonLastScanSummResp.scans[item].updatedAt) +
                        '" total_no_flaws="' + scaresponsevul +
                        '" app_name="' + appId + '"/>';
                }

                //sast scan summary
                if (jsonLastScanSummResp.scans[item].engines.toString().includes("sast")) {
                    var sastresponsevul = this.UTIL.getSastScanSummaryInfo(this.IMPLEMENTATION, jsonLastScanSummResp.scans[item].id);
                    sastScanSummaryAll += '<scan id="' + 'sast' + jsonLastScanSummResp.scans[item].id + '" app_id="' + appId +
                        '" last_scan_date="' + this.UTIL.parseDate(jsonLastScanSummResp.scans[item].updatedAt) +
                        '" total_no_flaws="' + sastresponsevul +
                        '" app_name="' + appId + '"/>';
                }
                var date = new GlideDateTime(this.UTIL.parseDate(jsonLastScanSummResp.scans[item].updatedAt));
                if (!this.LATEST || date > this.LATEST)
                    this.LATEST = date;
            }
            if (includesca) {
                includescanSummaryAll += "<scaScanData><scans>" + scaScanSummaryAll + "</scans></scaScanData>";
            }
            if (includesast) {
                includescanSummaryAll += "<sastScanData><scans>" + sastScanSummaryAll + "</scans></sastScanData>";
            }

            var reportContent = scanSummaryRootNodeStart + includescanSummaryAll + scanSummaryRootNodeEnd;
        } catch (err) {
            gs.info(this.MSG + " getSummaryReport : Error while getting the summary report." + err);
            throw err;
        }
        return reportContent;
    },

    // Gets the integration parameters as a map
    _getParameters: function(parameters) {
        var params = {
            run: null,
            remaining: {}
        };
        var includesca = this.UTIL.importScaFlaw(this.IMPLEMENTATION);
        var includesast = this.UTIL.importSastFlaw(this.IMPLEMENTATION);
        var app = '';
        try {
            if (parameters) {
                params = JSON.parse(parameters);
                if (params.latest) {
                    var latest = new GlideDateTime();
                    latest.setValue(params.latest);
                    params.latest = latest;
                    this.LATEST = latest;
                    gs.debug(this.MSG + 'latest time' + latest);
                }
            } else {
                this.LATEST = new GlideDateTime(this.DELTA_START_TIME || '1970-01-01T10:16:06.17544Z').getDate();
                var apps = this.AVR_API.getAppReleases();
                for (var i in apps) {
                    var appId = apps[i].source_app_id;
                    if (appId !== "undefined") {
                        var responseLastScan = this.UTIL.getScanList(this.IMPLEMENTATION, appId, this._getCurrentDeltaStartTime());
                        var jsonLastScanResp = JSON.parse(responseLastScan.getBody());
                        for (var item in jsonLastScanResp.scans) {
                            if (includesca) {
                                if (jsonLastScanResp.scans[item].engines.toString().includes("sca")) {
                                    app = jsonLastScanResp.scans[item].projectId;
                                }

                            }
                            if (includesast) {
                                if (jsonLastScanResp.scans[item].engines.toString().includes("sast")) {
                                    app = jsonLastScanResp.scans[item].projectId;
                                }
                            }
                        }
                    }

                    if (app == appId) {
                        var offsetId = this._getoffsets(appId);
                        params.remaining[app] = offsetId;
                    }
                }
                gs.debug(this.MSG + 'for appreleases complete');
                params = this._nextParameters(params);
                gs.debug(this.MSG + 'next parameters');
                if (params.run) {
                    this.PROCESS.setValue('parameters', JSON.stringify(this._serializeParameters(params)));
                    this.PROCESS.update();
                }
            }
        } catch (err) {
            gs.error(this.MSG + " _getParameters : Error while getting the integration parameters." + err);
            throw err;
        }
        return params;
    },
    // Gets the start time of the integration
    _getCurrentDeltaStartTime: function() {
        try {
            var delta = this.UTIL.parseTZDate(this.DELTA_START_TIME) || '1970-01-01T10:16:06.17544Z';
        } catch (err) {
            gs.error(this.MSG + " _getCurrentDeltaStartTime : Error while getting the current delta start time." + err);
            throw err;
        }
        return delta;
    },

    //to get offset(50 result at a time)
    _getoffsets: function(appId) {
        var offsets = [];
        var offset = 0;
        var responseLastScan = this.UTIL.getScanList(this.IMPLEMENTATION, appId, this._getCurrentDeltaStartTime());
        var jsonLastScanReportResp = JSON.parse(responseLastScan.getBody());
        var loopLength = jsonLastScanReportResp.scans.length / 50;

        for (var i = 0; i <= parseInt(loopLength); i++) {
            offset += 50;
            var offsetId = this._getoffset(appId, offset);
            if (offsetId) {
                offsets.push(offsetId);
                var date = new GlideDateTime();
            }
        }
        return offsets;
    },

    _getoffset: function(appId, offsetId) {
        return offsetId;
    },

    _serializeParameters: function(params) {
        if (params.latest)
            params.latest = params.latest.getValue();
        else
            delete params.latest;
        return params;
    },

    _nextParameters: function(params) {
        params.run = null;
        var keys = Object.keys(params.remaining);
        if (keys.length) {
            params.run = {};
            var key = keys[0];
            params.run[key] = params.remaining[key][0];
            params.remaining[key] = params.remaining[key].slice(1);
            if (!params.remaining[key].length)
                delete params.remaining[key];
        }

        params.latest = this.LATEST;
        return params;
    },

    //Presently returning the same buildId. 
    _getScan: function(appId, buildId) {
        return buildId;
    },

    shouldRetry: function(process) {
        return true;
    },

    type: 'CheckmarxOneScanSummaryIntegration'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-18 05:18:19</sys_created_on>
        <sys_id>d7f2d2e447131110328ca368436d4321</sys_id>
        <sys_mod_count>145</sys_mod_count>
        <sys_name>CheckmarxOneScanSummaryIntegration</sys_name>
        <sys_package display_value="Checkmarx One Vulnerability Integration" source="x_chec3_chexone">3d20e92d47471110328ca368436d436a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Checkmarx One Vulnerability Integration">3d20e92d47471110328ca368436d436a</sys_scope>
        <sys_update_name>sys_script_include_d7f2d2e447131110328ca368436d4321</sys_update_name>
        <sys_updated_by>apoorva.singh@checkmarx.com</sys_updated_by>
        <sys_updated_on>2023-05-23 14:55:23</sys_updated_on>
    </sys_script_include>
</record_update>
