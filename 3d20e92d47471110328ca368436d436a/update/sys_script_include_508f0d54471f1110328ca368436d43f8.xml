<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_chec3_chexone.CheckmarxOneConfigUtilBase</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Wrapper class to assemble the components for Checkmarx One Configuration Calls.</description>
        <name>CheckmarxOneConfigUtilBase</name>
        <script><![CDATA[var CheckmarxOneConfigUtilBase = Class.create();
CheckmarxOneConfigUtilBase.prototype = {
    initialize: function() {},

    testCredentials: function(config, uniqueId) {
        var errorMessage = "";
        var resultObj = {};
        var result = "true";
        try {
            if (!config)
                return {
                    "result": "false",
                    "errorMessage": gs.getMessage("CheckmarxOne configuration not found.")
                };
            var response = new x_chec3_chexone.CheckmarxOneUtil().getProjectList(config.getValue("integration_instance"));

        } catch (ex) {
            result = false;
            errorMessage = gs.getMessage("Credential validation failed!");
            gs.warn("Failed to validate Checkmarx credentials!  Reason: {0}", ex);
        } finally {
            resultObj = {
                "result": result,
                "error": errorMessage,
            };
        }
        return resultObj;
    },

    saveInstanceParams: function(sys_id) {
        var gr = new GlideRecord("x_chec3_chexone_checkmarxone_configuration");
        if (gr.get(sys_id)) {
            var instance = gr.getValue("integration_instance");
            var implConfig = new GlideRecord("sn_sec_int_impl_config");
            implConfig.addQuery("implementation", instance);
            implConfig.query();
            while (implConfig.next()) {
                var configName = implConfig.getDisplayValue("configuration");
                var configVal = gr.getValue(configName);

                if (implConfig.configuration.elem_type == "boolean")
                    implConfig.setValue("value", configVal === "1");
                else
                    implConfig.setValue("value", configVal);
                implConfig.update();
            }

            var newconfig = {
                "client_secret": gr.client_secret.getDecryptedValue(),
                "client_id": gr.getValue("client_id"),
                "tenant": gr.getValue("tenant"),
                "checkmarxone_api_base_url": gr.getValue("checkmarxone_api_base_url"),
                "checkmarxone_server_url": gr.getValue("checkmarxone_server_url"),
                "import_sca": gr.getValue("import_sca") === "1",
                "import_sast": gr.getValue("import_sast") === "1",
                "triaging_in_snow": gr.getValue("triaging_in_snow") === "1",

            };

            new sn_sec_int.Implementation().setConfiguration(instance, newconfig);
            return true;
        }
        return false;
    },

    type: 'CheckmarxOneConfigUtilBase'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-17 05:45:19</sys_created_on>
        <sys_id>508f0d54471f1110328ca368436d43f8</sys_id>
        <sys_mod_count>32</sys_mod_count>
        <sys_name>CheckmarxOneConfigUtilBase</sys_name>
        <sys_package display_value="Checkmarx One Vulnerability Integration" source="x_chec3_chexone">3d20e92d47471110328ca368436d436a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Checkmarx One Vulnerability Integration">3d20e92d47471110328ca368436d436a</sys_scope>
        <sys_update_name>sys_script_include_508f0d54471f1110328ca368436d43f8</sys_update_name>
        <sys_updated_by>apoorva.singh@checkmarx.com</sys_updated_by>
        <sys_updated_on>2023-05-02 12:57:08</sys_updated_on>
    </sys_script_include>
</record_update>
