<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_chec3_chexone.CheckmarxOneAppVulItemProcessor</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>This scripts processes the detailed report from Checkmarx and persists the data in Application Vulnerable Item table.</description>
        <name>CheckmarxOneAppVulItemProcessor</name>
        <script><![CDATA[var CheckmarxOneAppVulItemProcessor = Class.create();
CheckmarxOneAppVulItemProcessor.prototype = Object.extendsObject(sn_vul.ApplicationVulnerabilityImportProcessorBase, {

    MSG: 'CheckmarxOne Application Vulnerable Item Processor: ',
    NOT_AVAILABLE: 'Not Available',

    import_static_flaws: null,

    process: function(attachment) {

        if (attachment) {
            try {
                var doc = new XMLDocument2();
                doc.parseXML(new GlideSysAttachment().getContent(attachment));
                var listNode = doc.getNode('/detailedreport/xml/results');
                var reportData = {};
                if (listNode) {
                    var iter = listNode.getChildNodeIterator();
                    if (iter.hasNext())
                        iter.next();
                    while (iter.hasNext()) {
                        var node = iter.next();
                        reportData['source_app_id'] = node.getAttribute('app_id');
                        reportData['app_name'] = node.getAttribute('app_name');
                        reportData['source_scan_id'] = node.getAttribute('scan_id');
                        reportData['last_scan_date'] = new GlideDateTime(node.getAttribute('last_scan_date'));
                        reportData['scan_summary_name'] = reportData['app_name'] + ' ' + reportData['last_scan_date'];
                        reportData['scan_type'] = node.getAttribute('scan_type');
                        var queryData = {};
						var nvdData = {};
                        var resultObj = {};
                        var source_severity_string = node.getAttribute('source_severity');
                        if (source_severity_string == 'HIGH') {
                            var source_severity = 1;
                        } else if (source_severity_string == 'MEDIUM') {
                            source_severity = 2;
                        } else if (source_severity_string == 'LOW') {
                            source_severity = 3;
                        }
                        queryData['category_name'] = node.getAttribute('category_name');
                        var query_id = 'Checkmarx One' + "-" + node.getAttribute('id');
                        var cwe_name = node.getAttribute('cweName');
                       // var url = node.getAttribute('url');
                        queryData['scan_type'] = node.getAttribute('scan_type');
                        queryData['source_severity'] = source_severity;
                        queryData['threat'] = '';
                        queryData['cweId'] = node.getAttribute('cweId');
                        queryData['cvss_base_score'] = node.getAttribute('cvssScore');
                        queryData['cvss_vector'] = node.getAttribute('cvssVector');
                        queryData['last_detection_date'] = reportData.last_scan_date.getDate();
                        queryData['first_detection_date'] = new GlideDateTime(node.getAttribute('first_found_date')).getDate();
                        queryData['package_unique_id'] = node.getAttribute('package_unique_id');
                        queryData['package_name'] = node.getAttribute('package_name');
                        reportData['cweName'] = node.getAttribute('cweName');
                        if (node.getAttribute('recommendation') != '') {
                            queryData['source_recommendation'] = 'Recommended version-' + node.getAttribute('recommendation');
                            resultObj['source_recommendation'] = 'Recommended version-' + node.getAttribute('recommendation');
                        }
                        var scan_type = node.getAttribute('scan_type');

                        if (scan_type == 'static') {
                            queryData['source_entry_id'] = 'Checkmarx One' + " CWE-" + queryData['cweId'];
                            queryData['cwe_list'] = [{
                                cwe_id: queryData['cweId'],
                                name: queryData['category_name']
                            }];
                        } else {
                            queryData['source_entry_id'] = 'Checkmarx One' + "-" + node.getAttribute('id');
                        }

                        resultObj['source_app_id'] = reportData['source_app_id'];
                        resultObj['app_name'] = reportData.app_name;
                        resultObj['scan_type'] = reportData['scan_type'];
                        resultObj['package_unique_id'] = node.getAttribute('package_unique_id');
                        resultObj['package_name'] = node.getAttribute('package_name');
                        resultObj['source_notes'] = node.getAttribute('source_notes');
                        resultObj['location'] = node.getAttribute('location');
                        resultObj['source_link'] = node.getAttribute('sourcefile');
                        if (node.getAttribute('line_no') != '') {
                            resultObj['line_number'] = parseInt(node.getAttribute('line_no'));
                        }
                        resultObj['source_scan_id'] = reportData['source_scan_id'];
                        resultObj['last_scan_date'] = reportData['last_scan_date'];
                        resultObj['scan_summary_name'] = reportData['scan_summary_name'];
                        if (scan_type == 'static') {
                            resultObj['source_avit_id'] = node.getAttribute('id');
                        } else {
                            resultObj['source_avit_id'] = node.getAttribute('id') + node.getAttribute('package_unique_id');
                        }
                        resultObj['description'] = node.getLastChild().getTextContent().toString();
                        resultObj['source_references'] = node.getFirstChild().getTextContent().toString();
                        resultObj['source_vulnerability_summary'] = node.getLastChild().getTextContent().toString();
                        resultObj['source_remediation_status'] = node.getAttribute('status');
                        resultObj['last_found'] = reportData.last_scan_date.getDate();
                        resultObj['first_found'] = new GlideDateTime(node.getAttribute('first_found_date')).getDate();
                        resultObj['application_module'] = this.NOT_AVAILABLE;
                        resultObj['source_severity'] = source_severity_string;
                        resultObj['complies_with_policy'] = 'not_applicable';
                        resultObj['source_entry_id'] = queryData['source_entry_id'];

                        resultObj['category_name'] = queryData['category_name'];
                        if (scan_type != 'static') {
							nvdData['cvss_base_score'] = node.getAttribute('cvssScore');
                            nvdData['cvss_vector'] = node.getAttribute('cvssVector');
                            this._handleCVE(nvdData, resultObj, cwe_name);
                        }
                        this._upsertQuery(queryData);
                        this._upsertAVIT(resultObj);

                    }
                }
            } catch (ex) {
                errorMessage = gs.getMessage("Error in retriving data for app list integration!");
                gs.error(this.MSG + "errorMessage " + ex);
                throw ex;
            }

        }
        this.completeProcess(this.integrationProcessGr, this.import_counts);


    },

    //updating data to app vul entry table
    _upsertQuery: function(data) {
        try {
            var result = this.AVR_API.createOrUpdateAppVulEntry(data);
            if (!result)
                return;
            if (result.updated)
                this.import_counts.updated++;
            else if (result.inserted)
                this.import_counts.inserted++;
            else if (result.unchanged)
                this.import_counts.unchanged++;
        } catch (err) {
            gs.error(this.MSG + " _upsert : Error while inserting data into ServiceNow DB.");
            throw err;
        }
    },
    //updating data to app vul item table
    _upsertAVIT: function(data) {
        try {
            var result = this.AVR_API.createOrUpdateAVIT(data);
            if (!result)
                return;
            if (result.updated)
                this.import_counts.updated++;
            else if (result.inserted)
                this.import_counts.inserted++;
            else if (result.unchanged)
                this.import_counts.unchanged++;
        } catch (err) {
            gs.error(this.MSG + " _upsert : Error while inserting data into ServiceNow DB.");
            throw err;
        }
    },

    _handleCVE: function(nvdData, resultObj, cve) {
        var name = cve;
        var url = resultObj.source_references;
		var cvss_base_score = nvdData.cvss_base_score;
		var cvss_vector = nvdData.cvss_vector;

        // insert to sn_vul_nvd_entry
        var nvd = new GlideRecord("sn_vul_nvd_entry");
        var nvdExist = nvd.get("id", name);
        if (!nvdExist) {
            nvd.initialize();
            nvd.setValue("id", name);
            nvd.setValue("summary", url);
			nvd.setValue("v3_base_score", cvss_base_score);
			nvd.setValue("v3_attack_vector", cvss_vector);
            nvd.setValue("source", "Checkmarx One");
            nvd.setValue("integration_run", this.integrationProcessGr.integration_run + "");
            nvdExist = nvd.insert();
        }

    },



    type: 'CheckmarxOneAppVulItemProcessor'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>apoorva.singh@checkmarx.com</sys_created_by>
        <sys_created_on>2023-03-16 05:04:10</sys_created_on>
        <sys_id>ba2b3da69769e510026f72021153af1b</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>CheckmarxOneAppVulItemProcessor</sys_name>
        <sys_package display_value="Checkmarx One Vulnerability Integration" source="x_chec3_chexone">3d20e92d47471110328ca368436d436a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Checkmarx One Vulnerability Integration">3d20e92d47471110328ca368436d436a</sys_scope>
        <sys_update_name>sys_script_include_ba2b3da69769e510026f72021153af1b</sys_update_name>
        <sys_updated_by>apoorva.singh@checkmarx.com</sys_updated_by>
        <sys_updated_on>2023-05-23 14:52:48</sys_updated_on>
    </sys_script_include>
</record_update>
