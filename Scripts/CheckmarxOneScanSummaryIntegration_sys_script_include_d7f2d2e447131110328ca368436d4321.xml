<?xml version="1.0" encoding="UTF-8"?>
<unload unload_date="2024-05-23 09:42:19">
<sys_script_include action="INSERT_OR_UPDATE">
<access>public</access>
<active>true</active>
<api_name>x_chec3_chexone.CheckmarxOneScanSummaryIntegration</api_name>
<caller_access/>
<client_callable>false</client_callable>
<description>Integration script for the CheckmarxOne Scan Summary Integration.</description>
<name>CheckmarxOneScanSummaryIntegration</name>
<script><![CDATA[var CheckmarxOneScanSummaryIntegration = Class.create();
CheckmarxOneScanSummaryIntegration.prototype = Object.extendsObject(sn_vul.ApplicationVulnerabilityIntegrationBase, {

    UTIL: new x_chec3_chexone.CheckmarxOneUtil(),
    MSG: 'CheckmarxOneScanSummaryIntegration:',

    retrieveData: function() {
        var response = "<null/>";
        try {
            var params = this._getParameters(this.PROCESS.getValue('parameters'));
            if (params.run) {
                //  appId,  offset
                var appId = Object.keys(params.run)[0];
                var offsetId = params.run[Object.keys(params.run)[0]];
                response = this.getSummaryReport(appId, offsetId);
            }

        } catch (err) {
            gs.error(this.MSG + " retrieveData : Error while retrieving the data. Skipping appId: " + appId + ", scanId: " + offsetId + err);
            response = '<scanData><scaScanData><scans></scans></scaScanData><sastScanData><scans></scans></sastScanData><kicsScanData><scans></scans></kicsScanData></scanData>';
        }
        if (response == "<null/>") {
            response = '<scanData><scaScanData><scans></scans></scaScanData><sastScanData><scans></scans></sastScanData><kicsScanData><scans></scans></kicsScanData></scanData>';
        }
        params = this._serializeParameters(this._nextParameters(params));
        this.setNextRunParameters(params);

        //Saving delta_start_time
        if (!params.run) {
            var latest = this.LATEST ? this.LATEST : '';
            this.INTEGRATION.setValue('delta_start_time', latest);
            this.INTEGRATION.update();
            this.hasMoreData(false);
        } else
            this.hasMoreData(true);
        return {
            contents: new GlideSysAttachment().write(this.PROCESS, this.FILENAME, "xml", response),
            contentType: "sys_attachment",
            extension: "xml"
        };

    },

    //Creates XML summary for given scan Id
    getSummaryReport: function(appId, offsetId) {
        try {
            var scanSummaryRootNodeStart = "<scanData>";
            var scanSummaryRootNodeEnd = "</scanData>";
            var scaScanSummaryAll = '';
            var sastScanSummaryAll = '';
            var kicsScanSummaryAll = '';
            var includescanSummaryAll = '';
            var newoffset = offsetId - 1;
            var includesca = this.UTIL.importScaFlaw(this.IMPLEMENTATION);
            var includesast = this.UTIL.importSastFlaw(this.IMPLEMENTATION);
            var includekics = this.UTIL.importKicsFlaw(this.IMPLEMENTATION);
            var isPrimaryBranchEnabled = this.UTIL._getConfig(this.IMPLEMENTATION).sync_only_primary_branch.toString();
            var primaryBranch = '';
            var responseLastScanSummary = '';
            if (isPrimaryBranchEnabled == 'true')
                primaryBranch = this.UTIL.getProjectById(this.IMPLEMENTATION, appId).mainBranch.toString();
            if (isPrimaryBranchEnabled == 'true' && null != primaryBranch && '' != primaryBranch) {
                responseLastScanSummary = this.UTIL.getScanListFilterByBranch(this.IMPLEMENTATION, appId, this._getCurrentDeltaStartTime(), primaryBranch);
            } else
                responseLastScanSummary = this.UTIL.getScanInfo(this.IMPLEMENTATION, appId, newoffset, this._getCurrentDeltaStartTime());
            var jsonLastScanSummResp = JSON.parse(responseLastScanSummary.getBody());
            for (var item in jsonLastScanSummResp.scans) {
                //sca scan summary
                if (includesca && jsonLastScanSummResp.scans[item].engines.toString().includes("sca")) {
                    var scaresponsevul = this.UTIL.getScanSummaryInfo(this.IMPLEMENTATION, jsonLastScanSummResp.scans[item].id);
                    var scaScanType = "Full Scan";
                    if (scaresponsevul != -1) {
                        scaScanSummaryAll += '<scan id="' + 'sca' + jsonLastScanSummResp.scans[item].id + '" app_id="' + appId +
                            '" last_scan_date="' + this.UTIL.parseDate(jsonLastScanSummResp.scans[item].updatedAt) +
                            '" total_no_flaws="' + scaresponsevul +
                            '" branch="' + jsonLastScanSummResp.scans[item].branch +
                            '" scan_origin="' + jsonLastScanSummResp.scans[item].sourceOrigin +
                            '" scan_source="' + jsonLastScanSummResp.scans[item].sourceType +
                            '" scan_type="' + scaScanType +
                            '" app_name="' + appId + '"/>';
                    }
                }

                //sast scan summary
                if (includesast && jsonLastScanSummResp.scans[item].engines.toString().includes("sast")) {
                    var sastresponsevul = this.UTIL.getSastScanSummaryInfo(this.IMPLEMENTATION, jsonLastScanSummResp.scans[item].id);
                    var sastScanType = jsonLastScanSummResp.scans[item].metadata.configs[0].value.incremental == "false" ? "Full Scan" : "Incremental Scan";
                    if (sastresponsevul != -1) {
                        var loc = this._getLOCforSAST(jsonLastScanSummResp.scans[item].statusDetails);
                        sastScanSummaryAll += '<scan id="' + 'sast' + jsonLastScanSummResp.scans[item].id + '" app_id="' + appId +
                            '" last_scan_date="' + this.UTIL.parseDate(jsonLastScanSummResp.scans[item].updatedAt) +
                            '" total_no_flaws="' + sastresponsevul +
                            '" loc="' + loc +
                            '" branch="' + jsonLastScanSummResp.scans[item].branch +
                            '" scan_origin="' + jsonLastScanSummResp.scans[item].sourceOrigin +
                            '" scan_source="' + jsonLastScanSummResp.scans[item].sourceType +
                            '" scan_type="' + sastScanType +
                            '" app_name="' + appId + '"/>';
                    }
                }

                //kics scan summary
                if (includekics && jsonLastScanSummResp.scans[item].engines.toString().includes("kics")) {
                    var kicsresponsevul = this.UTIL.getKicsScanSummaryInfo(this.IMPLEMENTATION, jsonLastScanSummResp.scans[item].id);
                    var scanType = "Full Scan";
                    if (kicsresponsevul != -1) {
                        kicsScanSummaryAll += '<scan id="' + 'IaC' + jsonLastScanSummResp.scans[item].id + '" app_id="' + appId +
                            '" last_scan_date="' + this.UTIL.parseDate(jsonLastScanSummResp.scans[item].updatedAt) +
                            '" total_no_flaws="' + kicsresponsevul +
                            '" branch="' + jsonLastScanSummResp.scans[item].branch +
                            '" scan_origin="' + jsonLastScanSummResp.scans[item].sourceOrigin +
                            '" scan_source="' + jsonLastScanSummResp.scans[item].sourceType +
                            '" scan_type="' + scanType +
                            '" app_name="' + appId + '"/>';
                    }
                }
                var date = new GlideDateTime(this.UTIL.parseDate(jsonLastScanSummResp.scans[item].updatedAt));
                if (!this.LATEST || date > this.LATEST)
                    this.LATEST = date;
            }
            if (includesca) {
                includescanSummaryAll += "<scaScanData><scans>" + scaScanSummaryAll + "</scans></scaScanData>";
            }
            if (includesast) {
                includescanSummaryAll += "<sastScanData><scans>" + sastScanSummaryAll + "</scans></sastScanData>";
            }
            if (includekics) {
                includescanSummaryAll += "<kicsScanData><scans>" + kicsScanSummaryAll + "</scans></kicsScanData>";
            }

            reportContent = scanSummaryRootNodeStart + includescanSummaryAll + scanSummaryRootNodeEnd;
        } catch (err) {
            gs.error(this.MSG + " getSummaryReport : Error while getting the scan summary report: " + err);
            throw err;
        }
        return reportContent;
    },

    // Gets the integration parameters as a map
    _getParameters: function(parameters) {
        var params = {
            run: null,
            remaining: {}
        };
        var appId = '';
        var offsetId = '';
        try {
            if (parameters) {
                params = JSON.parse(parameters);
                if (params.latest) {
                    var latest = new GlideDateTime();
                    latest.setValue(params.latest);
                    params.latest = latest;
                    this.LATEST = latest;
                    gs.debug(this.MSG + 'latest time' + latest);
                }
            } else {
                this.LATEST = new GlideDateTime(this.DELTA_START_TIME || '1970-01-01T10:16:06.17544Z').getDate();
                var apps = this.AVR_API.getAppReleases();
                var projectIdsByLastScanDate = this.UTIL.getprojectScanList(this.IMPLEMENTATION, this._getCurrentDeltaStartTime());

                var config = this.UTIL._getConfig(this.IMPLEMENTATION);
                var filter_project = config.filter_project;
                var list_projects = this.UTIL.getConfigProjectList(this.IMPLEMENTATION);
                var list_projects_name = this.UTIL.getConfigProjectNameList(this.IMPLEMENTATION);
                if (list_projects_name && list_projects_name.length > 0 && filter_project == 'by_name')
                    var projectIdsByNames = this.UTIL.getProjectIdsFromProjectNames(this.IMPLEMENTATION, list_projects_name);

                for (var j in apps) {
                    appId = apps[j].source_app_id;
                    if (appId !== "undefined") {
                        var includeProjectFlag = this.UTIL.isProjectIncluded(this.IMPLEMENTATION, filter_project, list_projects, list_projects_name, projectIdsByNames, appId);
                        if (includeProjectFlag == 'true' && projectIdsByLastScanDate.includes(appId)) {
                            offsetId = this._getoffsets(appId);
                            params.remaining[appId] = offsetId;
                        }
                    }
                }
                params = this._nextParameters(params);
                if (params.run) {
                    this.PROCESS.setValue('parameters', JSON.stringify(this._serializeParameters(params)));
                    this.PROCESS.update();
                }
            }
        } catch (err) {
            gs.error(this.MSG + " _getParameters : Error while getting the integration parameters: " + err);
            // throw err;
        }
        return params;
    },
    // Gets the start time of the integration
    _getCurrentDeltaStartTime: function() {
        try {
            var delta = this.UTIL.parseTZDate(this.DELTA_START_TIME) || '1970-01-01T10:16:06.17544Z';
        } catch (err) {
            gs.error(this.MSG + " _getCurrentDeltaStartTime : Error while getting the current delta start time: " + err);
            throw err;
        }
        return delta;
    },

    //to get offset(to get offset value as 1 , to get details of last scan)
    _getoffsets: function(appId) {
        var offsets = [];
        var offset = 1;
        var loopLength = 1;
        var offsetId = this._getoffset(appId, offset);
        if (offsetId) {
            offsets.push(offsetId);
            var date = new GlideDateTime();
        }
        return offsets;
    },

    _getoffset: function(appId, offsetId) {
        return offsetId;
    },

    _serializeParameters: function(params) {
        if (params.latest)
            params.latest = params.latest.getValue();
        else
            delete params.latest;
        return params;
    },

    _nextParameters: function(params) {
        params.run = null;
        var keys = Object.keys(params.remaining);
        if (keys.length) {
            params.run = {};
            var key = keys[0];
            params.run[key] = params.remaining[key][0];
            params.remaining[key] = params.remaining[key].slice(1);
            if (!params.remaining[key].length)
                delete params.remaining[key];
        }

        params.latest = this.LATEST;
        return params;
    },

    //Presently returning the same buildId. 
    _getScan: function(appId, buildId) {
        return buildId;
    },

    shouldRetry: function(process) {
        return true;
    },

    _getLOCforSAST: function(statusDetails) {
        var loc = -1;

        if (null != statusDetails && statusDetails.length > 0) {
            for (var index in statusDetails) {
                var statusDetail = statusDetails[index];
                if (null != statusDetail && null != statusDetail.name && 'sast' == statusDetail.name && null != statusDetail.loc) {
                    loc = statusDetail.loc;
                    break;
                }
            }
        }

        return loc;
    },

    type: 'CheckmarxOneScanSummaryIntegration'
});]]></script>
<sys_class_name>sys_script_include</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-11-18 05:18:19</sys_created_on>
<sys_id>d7f2d2e447131110328ca368436d4321</sys_id>
<sys_mod_count>211</sys_mod_count>
<sys_name>CheckmarxOneScanSummaryIntegration</sys_name>
<sys_package display_value="Checkmarx One Vulnerability Integration" source="x_chec3_chexone">3d20e92d47471110328ca368436d436a</sys_package>
<sys_policy/>
<sys_scope display_value="Checkmarx One Vulnerability Integration">3d20e92d47471110328ca368436d436a</sys_scope>
<sys_update_name>sys_script_include_d7f2d2e447131110328ca368436d4321</sys_update_name>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2024-05-22 06:39:00</sys_updated_on>
</sys_script_include>
</unload>
