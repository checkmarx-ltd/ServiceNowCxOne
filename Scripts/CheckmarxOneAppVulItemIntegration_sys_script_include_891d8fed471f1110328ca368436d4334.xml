<?xml version="1.0" encoding="UTF-8"?>
<unload unload_date="2024-02-14 13:38:19">
<sys_script_include action="INSERT_OR_UPDATE">
<access>public</access>
<active>true</active>
<api_name>x_chec3_chexone.CheckmarxOneAppVulItemIntegration</api_name>
<caller_access/>
<client_callable>false</client_callable>
<description>Integration script for use with the Checkmarx Application Vulnerability Item Integration run.</description>
<name>CheckmarxOneAppVulItemIntegration</name>
<script><![CDATA[var CheckmarxOneAppVulItemIntegration = Class.create();
CheckmarxOneAppVulItemIntegration.prototype = Object.extendsObject(sn_vul.ApplicationVulnerabilityIntegrationBase, {

    UTIL: new x_chec3_chexone.CheckmarxOneUtil(),
    MSG: "CheckmarxOneAppVulItemIntegration",

    retrieveData: function() {
        var response = "<null/>";
        try {
            var params = this._getParameters(this.PROCESS.getValue('parameters'));
            if (params.run != null) {
                var appname = '';
                var lastscandate = '';
                var branch = '';
                var appId = '';
                var applicationIds = [];
                var applicationIdsStr = '';
                var engines = [];
                var engine = '';
                var reportLength = this.UTIL.getSASTVulcount(this.IMPLEMENTATION, Object.keys(params.run)[0]);
                var loopLength = reportLength / 50;
                var sast_offset = 0;
                //in result api offset value start from 0 and increment by 1, here it acts like page instead of number of item like other api
                for (var loop = 0; loop <= parseInt(loopLength); loop++) {
                    sast_offset += 1;
                }
                var delta_offset = sast_offset;
                var responseLastScanSummary = this.UTIL.getScanDetails(this.IMPLEMENTATION, Object.keys(params.run)[0]);
                var jsonLastScanSummResp = JSON.parse(responseLastScanSummary.getBody());
                //to map value of last_scan_date, project name and project Id in XML
                for (var value in jsonLastScanSummResp.scans) {
                    var projectResponse = this.UTIL.getProjectById(this.IMPLEMENTATION, jsonLastScanSummResp.scans[value].projectId);
                    if (null != projectResponse.applicationIds && projectResponse.applicationIds.length > 0)
                        applicationIds = applicationIds.concat(projectResponse.applicationIds);
                    lastscandate += this.UTIL.parseDate(jsonLastScanSummResp.scans[value].updatedAt);
                    appname += jsonLastScanSummResp.scans[value].projectName;
                    branch += jsonLastScanSummResp.scans[value].branch;
                    appId += jsonLastScanSummResp.scans[value].projectId;
                    engines = jsonLastScanSummResp.scans[value].engines;
                    engine = engines.toString();
                }

                var secondlastscan = this.UTIL.getSecondLastScan(this.IMPLEMENTATION, appId, Object.keys(params.run)[0]);
                if (applicationIds.length > 0) {
                    applicationIdsStr = applicationIds.toString();
                }
            }
            if (params.run) {
                //   scanId, offset
                var scanId = Object.keys(params.run)[0];
                response = this.getDetailedReport(scanId, params.run[Object.keys(params.run)[0]], lastscandate, secondlastscan, appname, branch, appId, applicationIdsStr, engine, delta_offset);
                gs.debug(this.MSG + ' getDetailedReport response:' + response);

            }
            params = this._serializeParameters(this._nextParameters(params));
            this.setNextRunParameters(params);

            //Saving delta_start_time
            if (!params.run) {
                var latest = this.LATEST ? this.LATEST : '';
                this.INTEGRATION.setValue('delta_start_time', latest);
                this.INTEGRATION.update();
                this.hasMoreData(false);
            } else
                this.hasMoreData(true);
        } catch (err) {
            gs.error(this.MSG + " retrieveData : Error occured while getting report. Skipping buildId: " + scanId + err);
            response = '<detailedreport><xml id="checkmarxone"><results></results></xml></detailedreport>';
        }
        if (response == "<null/>") {
            response = '<detailedreport><xml id="checkmarxone"><results></results></xml></detailedreport>';
        }

        return {
            contents: new GlideSysAttachment().write(this.PROCESS, this.FILENAME, "xml", response),
            contentType: "sys_attachment",
            extension: "xml"
        };
    },

    getDetailedReport: function(scanId, offset, lastscandate, secondlastscan, appname, branch, appId, applicationIdsStr, engine, delta_offset) {
        try {
            var includesca = this.UTIL.importScaFlaw(this.IMPLEMENTATION);
            var includesast = this.UTIL.importSastFlaw(this.IMPLEMENTATION);
            var includekics = this.UTIL.importKicsFlaw(this.IMPLEMENTATION);
            var config = this.UTIL._getConfig(this.IMPLEMENTATION);
            var apibaseurl = config.checkmarxone_api_base_url;
            var scanDetailedRootNodeStart = "<detailedreport><xml id=\"checkmarxone\"><results>";
            var scanDetailedRootNodeEnd = "</results></xml></detailedreport>";
            var SCAscanDetailedAll = '';
            var SASTscanDetailedAll = '';
            var SASTDeltascanDetailedAll = '';
            var KICSscanDetailedAll = '';
            var scanDetailedAll = '';
            var line = '';
            var ref = '';
            var notes = '';
            var recommendedVersion = '';
            var location = '';
            var package_unique_id = " ";
            var package_name = " ";
            var cvssScore = " ";
            var cvssVector = " ";
            var newoffset = offset - 1;
            var scan_type = "static";
            var vulnerabilityCountThresholdLevel = config.vulnerability_threshold_level;
            var delta_ = 0;

            if (includesast && engine.includes('sast')) {
                if (secondlastscan != -1 && delta_offset > newoffset) {
                    var responseDeltaScanReport = this.UTIL.getDeltaScan(this.IMPLEMENTATION, appId, scanId, secondlastscan, newoffset);
                    if (responseDeltaScanReport != -1) {
                        var jsonDeltaScanReportResp = JSON.parse(responseDeltaScanReport.getBody());
                        for (var item in jsonDeltaScanReportResp.results) {
                            var severity = jsonDeltaScanReportResp.results[item].severity;

                            if ((vulnerabilityCountThresholdLevel == 'INFO') ||
                                (vulnerabilityCountThresholdLevel == 'LOW' && severity.toUpperCase() != 'INFO') ||
                                (vulnerabilityCountThresholdLevel == 'MEDIUM' && severity.toUpperCase() != 'INFO' && severity.toUpperCase() != 'LOW') ||
                                (vulnerabilityCountThresholdLevel == 'HIGH' && severity.toUpperCase() != 'INFO' && severity.toUpperCase() != 'LOW' && severity.toUpperCase() != 'MEDIUM') ||
                                severity.toUpperCase() == 'CRITICAL') {
                                var i = 0;
                                var delta_path = '';
                                for (var j in jsonDeltaScanReportResp.results[item].nodes) {
                                    if (i < 100) {
                                        var pathStr = ' path:' + jsonDeltaScanReportResp.results[item].nodes[j].fileName + ' line: ' + jsonDeltaScanReportResp.results[item].nodes[j].line + ' column: ' + jsonDeltaScanReportResp.results[item].nodes[j].column;
                                        delta_path += pathStr;
                                    }
                                }
                                var owasp = this._getOWASPTop10(jsonDeltaScanReportResp.results[item].compliances);
                                var sans = this._getSANSTop25(jsonDeltaScanReportResp.results[item].compliances);
                                SASTDeltascanDetailedAll += '<result id="' + jsonDeltaScanReportResp.results[item].similarityID + '" scan_type="' + scan_type +
                                    '" cweId="' + jsonDeltaScanReportResp.results[item].cweID +
                                    '" cweName="' + jsonDeltaScanReportResp.results[item].queryName +
                                    '" category_name="' + jsonDeltaScanReportResp.results[item].queryName +
                                    '" source_severity="' + jsonDeltaScanReportResp.results[item].severity +
                                    '" package_unique_id="' + package_unique_id +
                                    '" package_name="' + package_name +
                                    '" location="' + jsonDeltaScanReportResp.results[item].nodes[0].fileName +
                                    '" line_no="' + jsonDeltaScanReportResp.results[item].nodes[0].line +
                                    '" cvssScore="' + cvssScore +
                                    '" recommendation="' + recommendedVersion +
                                    '" sourcefile="' + apibaseurl + '/results/' + scanId + '/' + appId + '/sast' +
                                    '" cvssVector="' + cvssVector +
                                    '" first_found_date="' + this.UTIL.parseDate(jsonDeltaScanReportResp.results[item].firstFoundAt) +
                                    '" state="' + jsonDeltaScanReportResp.results[item].state +
                                    '" status="' + jsonDeltaScanReportResp.results[item].status +
                                    '" app_id="' + appId +
                                    '" branch="' + branch +
                                    '" last_scan_date="' + lastscandate +
                                    '" OWASPTop10="' + owasp +
                                    '" SANSTop25="' + sans +
                                    '" application_ids="' + applicationIdsStr +
                                    '" scan_id="' + 'sast' + scanId + '">' +
                                    '<references><' + '![CDATA[' + delta_path + ']]' + '></references>' +
                                    '<description><' + '![CDATA[' + jsonDeltaScanReportResp.results[item].group + ']]' + '></description></result>';
                            }
                        }
                    }
                    if (jsonDeltaScanReportResp.results == '' || jsonDeltaScanReportResp.results == null) {
                        delta_ += 1;
                    }

                }
            }

            var responseLastScanReport = this.UTIL.getVulInfo(this.IMPLEMENTATION, scanId, newoffset);
            var jsonLastScanReportResp = JSON.parse(responseLastScanReport.getBody());
            for (item in jsonLastScanReportResp.results) {

                if (SASTDeltascanDetailedAll == '' && jsonLastScanReportResp.results[item].type == "sast" && delta_ == 0) {
                    var sastseverity = jsonLastScanReportResp.results[item].severity;

                    if ((vulnerabilityCountThresholdLevel == 'INFO') ||
                        (vulnerabilityCountThresholdLevel == 'LOW' && sastseverity.toUpperCase() != 'INFO') ||
                        (vulnerabilityCountThresholdLevel == 'MEDIUM' && sastseverity.toUpperCase() != 'INFO' && sastseverity.toUpperCase() != 'LOW') ||
                        (vulnerabilityCountThresholdLevel == 'HIGH' && sastseverity.toUpperCase() != 'INFO' && sastseverity.toUpperCase() != 'LOW' && sastseverity.toUpperCase() != 'MEDIUM') ||
                        sastseverity.toUpperCase() == 'CRITICAL') {
                        var sast_path = '';
                        var m = 0;
                        for (j in jsonLastScanReportResp.results[item].data.nodes) {
                            if (m < 100) {
                                var full_path = ' path:' + jsonLastScanReportResp.results[item].data.nodes[j].fileName + ' line: ' + jsonLastScanReportResp.results[item].data.nodes[j].line + ' column: ' + jsonLastScanReportResp.results[item].data.nodes[j].column;
                                sast_path += full_path;
                            }
                        }
                        SASTscanDetailedAll += '<result id="' + jsonLastScanReportResp.results[item].similarityId + '" scan_type="' + scan_type +
                            '" cweId="' + jsonLastScanReportResp.results[item].vulnerabilityDetails.cweId +
                            '" cweName="' + jsonLastScanReportResp.results[item].data.queryName +
                            '" category_name="' + jsonLastScanReportResp.results[item].data.group +
                            '" source_severity="' + jsonLastScanReportResp.results[item].severity +
                            '" package_unique_id="' + package_unique_id +
                            '" package_name="' + package_name +
                            '" location="' + jsonLastScanReportResp.results[item].data.nodes[0].fileName +
                            '" line_no="' + jsonLastScanReportResp.results[item].data.nodes[0].line +
                            '" cvssScore="' + cvssScore +
                            '" recommendation="' + recommendedVersion +
                            '" sourcefile="' + apibaseurl + '/results/' + scanId + '/' + appId + '/sast' +
                            '" cvssVector="' + cvssVector +
                            '" first_found_date="' + this.UTIL.parseDate(jsonLastScanReportResp.results[item].firstFoundAt) +
                            '" state="' + jsonLastScanReportResp.results[item].state +
                            '" status="' + jsonLastScanReportResp.results[item].status +
                            '" app_id="' + appId +
                            '" branch="' + branch +
                            '" last_scan_date="' + lastscandate +
                            '" scan_id="' + 'sast' + scanId + '">' +
                            '<references><' + '![CDATA[' + sast_path + ']]' + '></references>' +
                            '<description><' + '![CDATA[' + jsonLastScanReportResp.results[item].description + ']]' + '></description></result>';
                    }

                }

                if (jsonLastScanReportResp.results[item].type == "sca" || jsonLastScanReportResp.results[item].type == "sca-container") {

                    if (jsonLastScanReportResp.results[item].type == "sca") {
                        for (var k in jsonLastScanReportResp.results[item].data.packageData) {
                            var url = jsonLastScanReportResp.results[item].data.packageData[k].url;
                            ref += url + ',  ';
                            var sca_packageID = jsonLastScanReportResp.results[item].data.packageIdentifier;
                            recommendedVersion = jsonLastScanReportResp.results[item].data.recommendedVersion;
                        }
                    } else {
                        sca_packageID = jsonLastScanReportResp.results[item].data.packageName + ' version: ' + jsonLastScanReportResp.results[item].data.packageVersion;
                    }
                    var scaseverity = jsonLastScanReportResp.results[item].severity;

                    if ((vulnerabilityCountThresholdLevel == 'INFO') ||
                        (vulnerabilityCountThresholdLevel == 'LOW' && scaseverity.toUpperCase() != 'INFO') ||
                        (vulnerabilityCountThresholdLevel == 'MEDIUM' && scaseverity.toUpperCase() != 'INFO' && scaseverity.toUpperCase() != 'LOW') ||
                        (vulnerabilityCountThresholdLevel == 'HIGH' && scaseverity.toUpperCase() != 'INFO' && scaseverity.toUpperCase() != 'LOW' && scaseverity.toUpperCase() != 'MEDIUM') ||
                        scaseverity.toUpperCase() == 'CRITICAL') {
                        SCAscanDetailedAll += '<result id="' + jsonLastScanReportResp.results[item].id +
                            '" scan_type="' + 'sca' +
                            '" cweId="' + jsonLastScanReportResp.results[item].vulnerabilityDetails.cweId +
                            '" cweName="' + jsonLastScanReportResp.results[item].vulnerabilityDetails.cveName +
                            '" cvssScore="' + jsonLastScanReportResp.results[item].vulnerabilityDetails.cvssScore +
                            '" cvssVector="' + jsonLastScanReportResp.results[item].vulnerabilityDetails.cvss.attackVector +
                            '" category_name="' + jsonLastScanReportResp.results[item].vulnerabilityDetails.cweId +
                            '" source_severity="' + jsonLastScanReportResp.results[item].severity +
                            '" first_found_date="' + this.UTIL.parseDate(jsonLastScanReportResp.results[item].firstFoundAt) +
                            '" state="' + jsonLastScanReportResp.results[item].state +
                            '" status="' + jsonLastScanReportResp.results[item].status +
                            '" package_unique_id="' + sca_packageID +
                            '" recommendation="' + recommendedVersion +
                            '" package_name="' + sca_packageID +
                            '" sourcefile="' + apibaseurl + '/sca/#/projects/' + appId + '/reports/' + scanId +
                            '/vulnerabilities/' + jsonLastScanReportResp.results[item].vulnerabilityDetails.cweId + '%3AMaven-commons-collections%3Acommons-collections-3.2.1/vulnerabilityDetails' +
                            '" line_no="' + line +
                            '" location="' + location +
                            '" app_id="' + appId +
                            '" branch="' + branch +
                            '" last_scan_date="' + lastscandate +
                            '" application_ids="' + applicationIdsStr +
                            '" scan_id="' + 'sca' + scanId + '">' +
                            '<references><' + '![CDATA[' + ref + ']]' + '></references>' +
                            '<description><' + '![CDATA[' + jsonLastScanReportResp.results[item].description + ']]' + '></description></result>';
                    }
                }
                if (jsonLastScanReportResp.results[item].type == "kics") {
                    var kicsseverity = jsonLastScanReportResp.results[item].severity;

                    if ((vulnerabilityCountThresholdLevel == 'INFO') ||
                        (vulnerabilityCountThresholdLevel == 'LOW' && kicsseverity.toUpperCase() != 'INFO') ||
                        (vulnerabilityCountThresholdLevel == 'MEDIUM' && kicsseverity.toUpperCase() != 'INFO' && kicsseverity.toUpperCase() != 'LOW') ||
                        (vulnerabilityCountThresholdLevel == 'HIGH' && kicsseverity.toUpperCase() != 'INFO' && kicsseverity.toUpperCase() != 'LOW' && kicsseverity.toUpperCase() != 'MEDIUM') ||
                        kicsseverity.toUpperCase() == 'CRITICAL') {
                        var kicsowasp = this._getOWASPTop10(jsonLastScanReportResp.results[item].vulnerabilityDetails.compliances);
                        var kicssans = this._getSANSTop25(jsonLastScanReportResp.results[item].vulnerabilityDetails.compliances);
                        KICSscanDetailedAll += '<result id="' + jsonLastScanReportResp.results[item].similarityId + '" scan_type="' + 'kics' +
                            '" cweId="' + jsonLastScanReportResp.results[item].data.queryId +
                            '" cweName="' + jsonLastScanReportResp.results[item].data.queryName +
                            '" category_name="' + jsonLastScanReportResp.results[item].data.queryName +
                            '" source_severity="' + jsonLastScanReportResp.results[item].severity +
                            '" package_unique_id="' + package_unique_id +
                            '" package_name="' + package_name +
                            '" location="' + jsonLastScanReportResp.results[item].data.fileName +
                            '" line_no="' + jsonLastScanReportResp.results[item].data.line +
                            '" cvssScore="' + cvssScore +
                            '" recommendation="' + recommendedVersion +
                            '" sourcefile="' + apibaseurl + '/results/' + scanId + '/' + appId + '/kics' +
                            '" cvssVector="' + cvssVector +
                            '" first_found_date="' + this.UTIL.parseDate(jsonLastScanReportResp.results[item].firstFoundAt) +
                            '" state="' + jsonLastScanReportResp.results[item].state +
                            '" status="' + jsonLastScanReportResp.results[item].status +
                            '" app_id="' + appId +
                            '" branch="' + branch +
                            '" last_scan_date="' + lastscandate +
                            '" OWASPTop10="' + kicsowasp +
                            '" SANSTop25="' + kicssans +
                            '" application_ids="' + applicationIdsStr +
                            '" scan_id="' + 'IaC' + scanId + '">' +
                            '<references><' + '![CDATA[' + notes + ']]' + '></references>' +
                            '<description><' + '![CDATA[' + jsonLastScanReportResp.results[item].description + ']]' + '></description></result>';
                    }

                }

            }
            if (includesca) {
                scanDetailedAll += SCAscanDetailedAll;
            }
            if (includesast) {
                if (SASTDeltascanDetailedAll == '') {
                    scanDetailedAll += SASTscanDetailedAll;
                } else {
                    scanDetailedAll += SASTDeltascanDetailedAll;
                }

            }
            if (includekics) {
                scanDetailedAll += KICSscanDetailedAll;
            }
            var reportContent = scanDetailedRootNodeStart + scanDetailedAll + scanDetailedRootNodeEnd;

        } catch (err) {
            gs.info(this.MSG + " getDetailedReport : Error while getting the detailed report." + err);
            throw err;
        }
        return reportContent;
    },

    // Get all the OWASP Top 10 compliances as a concatenated string with comma.
    _getOWASPTop10: function(compliances) {
        var owasp = '';
        if (compliances != null) {
            for (var value in compliances) {
                var compliance = compliances[value].toString();
                var tempStr = compliance.toLowerCase();
                var containsStr = tempStr.indexOf('owasp top 10');
                if (containsStr != -1) {
                    if (owasp == '')
                        owasp += compliance;
                    else
                        owasp += ',' + compliance;
                }
            }
        }
        return owasp;
    },

    // Get all the SANS Top 25 compliances as a concatenated string with comma.
    _getSANSTop25: function(compliances) {
        var sans = '';
        if (compliances != null) {
            for (var value in compliances) {
                var compliance = compliances[value].toString();
                var tempStr = compliance.toLowerCase();
                var containsStr = tempStr.indexOf('sans top 25');
                if (containsStr != -1) {
                    if (sans == '')
                        sans += compliance;
                    else
                        sans += ',' + compliance;
                }
            }
        }
        return sans;
    },

    // Gets the integration parameters as a map
    _getParameters: function(parameters) {
        var params = {
            run: null,
            remaining: {}
        };

        try {
            if (parameters) {
                params = JSON.parse(parameters);
                if (params.latest) {
                    var latest = new GlideDateTime();
                    latest.setValue(params.latest);
                    params.latest = latest;
                    this.LATEST = latest;
                }
            } else {
                this.LATEST = new GlideDateTime(this.DELTA_START_TIME || '1970-01-01T10:16:06.17544Z').getDate();
                var apps = this.AVR_API.getAppReleases();
                var isPrimaryBranchEnabled = this.UTIL._getConfig(this.IMPLEMENTATION).sync_only_primary_branch.toString();
                var app_list = this.UTIL.getConfigProjectList(this.IMPLEMENTATION);
                var app = '';
                var appId = '';
                var scanId = '';
                var offsetId = '';
                var scans = [];
                var appIds = [];
                for (var i in apps) {
                    appIds.push(apps[i].source_app_id);
                }
                if (app_list && app_list.length > 0) {
                    for (var id in app_list) {
                        if (appIds.indexOf(app_list[id]) != -1 && app_list[id] !== "undefined") {
                            appId = app_list[id];
                            scans = this._getScans(appId, isPrimaryBranchEnabled);
                            for (var item in scans) {
                                scanId = scans[item];
                                offsetId = this._getoffsets(appId, scanId);
                                params.remaining[scanId] = offsetId;
                            }
                        }
                    }
                } else {
                    for (var j in apps) {
                        appId = apps[j].source_app_id;
                        if (appId !== "undefined") {
                            scans = this._getScans(appId, isPrimaryBranchEnabled);
                            for (var k in scans) {
                                scanId = scans[k];
                                offsetId = this._getoffsets(appId, scanId);
                                params.remaining[scanId] = offsetId;
                            }
                        }
                    }
                }
                params = this._nextParameters(params);
                if (params.run) {
                    this.PROCESS.setValue('parameters', JSON.stringify(this._serializeParameters(params)));
                    this.PROCESS.update();
                }
            }
        } catch (err) {
            gs.error(this.MSG + " _getParameters : Error while getting the integration parameters." + err);
            throw err;
        }
        return params;
    },
    // Gets the start time of the integration
    _getCurrentDeltaStartTime: function() {
        try {
            var delta = this.UTIL.parseTZDate(this.DELTA_START_TIME) || '1970-01-01T10:16:06.17544Z';
        } catch (err) {
            gs.error(this.MSG + " _getCurrentDeltaStartTime : Error while getting the current delta start time." + err);
            throw err;
        }
        return delta;
    },

    // Gets the scan list for the particular app
    _getScans: function(appId, isPrimaryBranchEnabled) {

        var includesca = this.UTIL.importScaFlaw(this.IMPLEMENTATION);
        var includesast = this.UTIL.importSastFlaw(this.IMPLEMENTATION);
        var includekics = this.UTIL.importKicsFlaw(this.IMPLEMENTATION);
        var scans = [];
        var scanId = '';
        try {
            if (isPrimaryBranchEnabled == 'true')
                var primaryBranch = this.UTIL.getProjectById(this.IMPLEMENTATION, appId).mainBranch.toString();
            var responseLastScan = this.UTIL.getScanList(this.IMPLEMENTATION, appId, this._getCurrentDeltaStartTime());
            var jsonLastScanResp = JSON.parse(responseLastScan.getBody());
            for (var item in jsonLastScanResp.scans) {

                if (null != jsonLastScanResp.scans[item] && null != jsonLastScanResp.scans[item].branch)
                    var scanBranch = jsonLastScanResp.scans[item].branch.toString();
                var isScanAllowed = 'true';
                if (isPrimaryBranchEnabled == 'true' && primaryBranch != scanBranch)
                    isScanAllowed = 'false';
                if (includesca && isScanAllowed == 'true') {
                    if (jsonLastScanResp.scans[item].engines.toString().includes("sca")) {
                        scanId = this._getScan(appId, jsonLastScanResp.scans[item].id);
                    }
                }
                if (includesast && isScanAllowed == 'true') {
                    if (jsonLastScanResp.scans[item].engines.toString().includes("sast")) {
                        scanId = this._getScan(appId, jsonLastScanResp.scans[item].id);
                    }
                }
                if (includekics && isScanAllowed == 'true') {
                    if (jsonLastScanResp.scans[item].engines.toString().includes("kics")) {
                        scanId = this._getScan(appId, jsonLastScanResp.scans[item].id);
                    }
                }
                if (scanId && scanId != '') {
                    scans.push(scanId);
                    var date = new GlideDateTime(this.UTIL.parseDate(jsonLastScanResp.scans[item].updatedAt));
                    if (!this.LATEST || date > this.LATEST)
                        this.LATEST = date;
                }

            }
        } catch (err) {
            gs.info(this.MSG + " _getScans : Error while getting scans." + err);
        }
        return scans;
    },
    //to get offset (50 items at a time)
    _getoffsets: function(appId, scanId) {
        var offsets = [];
        var offset = 0;
        var reportLength = this.UTIL.getTotalVulcount(this.IMPLEMENTATION, scanId);
        var loopLength = reportLength / 50;
        //in result api offset value start from 0 and increment by 1, here it acts like page instead of number of item like other api
        for (var i = 0; i <= parseInt(loopLength); i++) {
            offset += 1;
            var offsetId = this._getoffset(scanId, offset);
            if (offsetId) {
                offsets.push(offsetId);
                var date = new GlideDateTime();
            }
        }
        return offsets;
    },
    _getScan: function(appId, buildId) {
        return buildId;
    },

    _getoffset: function(scanId, offsetId) {
        return offsetId;
    },

    _serializeParameters: function(params) {
        if (params.latest)
            params.latest = params.latest.getValue();
        else
            delete params.latest;
        return params;
    },

    _nextParameters: function(params) {
        params.run = null;
        var keys = Object.keys(params.remaining);
        if (keys.length) {
            params.run = {};
            var key = keys[0];
            params.run[key] = params.remaining[key][0];
            params.remaining[key] = params.remaining[key].slice(1);
            if (!params.remaining[key].length)
                delete params.remaining[key];
        }

        params.latest = this.LATEST;
        return params;
    },

    shouldRetry: function(process) {
        return true;
    },

    _getObjValues: function(obj) {
        var values = Object.keys(obj).map(function(e) {
            return obj[e];
        });
        return values;
    },

    type: 'CheckmarxOneAppVulItemIntegration'
});]]></script>
<sys_class_name>sys_script_include</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-11-21 12:06:20</sys_created_on>
<sys_id>891d8fed471f1110328ca368436d4334</sys_id>
<sys_mod_count>266</sys_mod_count>
<sys_name>CheckmarxOneAppVulItemIntegration</sys_name>
<sys_package display_value="Checkmarx One Vulnerability Integration" source="x_chec3_chexone">3d20e92d47471110328ca368436d436a</sys_package>
<sys_policy/>
<sys_scope display_value="Checkmarx One Vulnerability Integration">3d20e92d47471110328ca368436d436a</sys_scope>
<sys_update_name>sys_script_include_891d8fed471f1110328ca368436d4334</sys_update_name>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2024-02-14 09:04:50</sys_updated_on>
</sys_script_include>
</unload>
