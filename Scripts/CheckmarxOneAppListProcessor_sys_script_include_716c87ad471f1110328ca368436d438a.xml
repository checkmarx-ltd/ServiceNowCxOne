<?xml version="1.0" encoding="UTF-8"?>
<unload unload_date="2025-02-07 05:33:25">
<sys_script_include action="INSERT_OR_UPDATE">
<access>public</access>
<active>true</active>
<api_name>x_chec3_chexone.CheckmarxOneAppListProcessor</api_name>
<caller_access/>
<client_callable>false</client_callable>
<description>Converts the appinfo xml data into a json object that can be consumed by the VR Application Vulnerability API.</description>
<mobile_callable>false</mobile_callable>
<name>CheckmarxOneAppListProcessor</name>
<sandbox_callable>false</sandbox_callable>
<script><![CDATA[var CheckmarxOneAppListProcessor = Class.create();
CheckmarxOneAppListProcessor.prototype = Object.extendsObject(sn_vul.ApplicationVulnerabilityImportProcessorBase, {
    /*
     * Converts an xml string of application information objects into javascript objects
     *    passed individually to the VR AppVul API
     */
    MSG: 'CheckmarxOne AppListProcessor:',
    UTIL: new x_chec3_chexone.CheckmarxOneUtil(),

    process: function(attachment) {
        if (!attachment) {
            gs.warn(gs.getMessage('CheckmarxOneAppListProcessor: Called with no attachment'));
            return;
        }
        try {
            this.UTIL.validateXML(new GlideSysAttachment().getContent(attachment), 'error');
            //Parsing the Project List attachment
            var appDoc = new XMLDocument2();
            appDoc.parseXML(new GlideSysAttachment().getContent(attachment));
            var listNode = appDoc.getNode("/appInfoList/xml/projects");
            var iter = listNode.getChildNodeIterator();

        } catch (ex) {
            gs.error(this.MSG + "Error occurred while validating or parsing the XML: " + ex);
            throw ex;
        }
        var errorProcess = '';
        while (iter.hasNext()) {
            try {
                var appNode = iter.next();
                var attributes = appNode.getAttributes();
                var applicationId = '';
                var appId;
                var projectTags = '';
                var primaryBranch = '';
                var infoObj = {};

                var childIter = appNode.getChildNodeIterator();
                var projectTagsFlag = 'false';
                var primaryBranchFlag = 'false';
                while (childIter.hasNext) {
                    var childNode = childIter.next();
                    if (childNode.getNodeName() == "projectTags") {
                        projectTags = childNode.getTextContent();
                        projectTagsFlag = 'true';
                    }
                    if (childNode.getNodeName() == "primaryBranch") {
                        primaryBranch = childNode.getTextContent();
                        primaryBranchFlag = 'true';
                    }
                    if (projectTagsFlag == 'true' && primaryBranchFlag == 'true')
                        break;
                }
                if (appNode.getAttribute('applicationIds') && appNode.getAttribute('applicationIds') != {})
                    infoObj[gs.getMessage("Application Id ")] = appNode.getAttribute('applicationIds').toString();

                if (null != primaryBranch && '' != primaryBranch)
                    infoObj[gs.getMessage("Primary Branch ")] = primaryBranch.toString();

                if (infoObj == {})
                    infoObj = "";

                //map attributes from Checkmarx into the servicenow expected format'
                var appObj = {
                    source_app_id: attributes.id,
                    app_name: appNode.getLastChild().getTextContent().toString(),
                    apm_app_id: projectTags,
                    source_assigned_teams: attributes.groups,
                    description: 'created at' + attributes.createdAt,
                    source_additional_info: JSON.stringify(infoObj),
                    source_app_guid: primaryBranch.toString()

                };
                //Updating the project information in ServiceNow table
                var result = this.AVR_API.createOrUpdateApp(appObj);
                if (result != null) {
                    if (result.inserted)
                        this.import_counts.inserted++;
                    else if (result.updated)
                        this.import_counts.updated++;
                    else if (result.unchanged)
                        this.import_counts.unchanged++;
                }

            } catch (ex) {
                errorMessage = gs.getMessage("Error in retriving data for app list integration!");
                gs.error(this.MSG + "errorMessage " + ex);
                errorProcess += " | " + ex.getMessage();
            }
        }

        if (!gs.nil(errorProcess))
            gs.error(this.MSG + "All errors that occurred while processing project lists: " + errorProcess);
        this.completeProcess(this.integrationProcessGr, this.import_counts);
    },

    type: 'CheckmarxOneAppListProcessor'
});]]></script>
<sys_class_name>sys_script_include</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-11-21 12:03:00</sys_created_on>
<sys_id>716c87ad471f1110328ca368436d438a</sys_id>
<sys_mod_count>79</sys_mod_count>
<sys_name>CheckmarxOneAppListProcessor</sys_name>
<sys_package display_value="Checkmarx One Vulnerability Integration" source="x_chec3_chexone">3d20e92d47471110328ca368436d436a</sys_package>
<sys_policy/>
<sys_scope display_value="Checkmarx One Vulnerability Integration">3d20e92d47471110328ca368436d436a</sys_scope>
<sys_update_name>sys_script_include_716c87ad471f1110328ca368436d438a</sys_update_name>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2024-12-02 17:29:36</sys_updated_on>
</sys_script_include>
</unload>
